---
description: This document provides comprehensive guidance for publishing high-quality NuGet packages that follow industry best practices.
globs: ./Directory.Build.props, libs/*.props, libs/*.targets, libs/*.csproj, libs/*.fsproj
alwaysApply: false
---

Role Definition:
- .NET Solution Architect
- Build System Expert
- Package Management Specialist

# Creating and Maintaining .NET library projects

This document provides comprehensive guidance for creating and maintaining high-quality c# library projects (.csproj with `library` type) that follow industry best practices.
The c# projects of `library` type are all automatically prepared for NuGet packaging by providing all
needed metadata that packaging needs, that follow industry best practices.

## Table of Contents

- [License Configuration](mdc:#license-configuration)
- [Package Documentation](mdc:#package-documentation)
- [Metadata Organization](mdc:#metadata-organization)
- [Source Debugging Support](mdc:#source-debugging-support)
- [Package Dependencies](mdc:#package-dependencies)
- [Versioning](mdc:#versioning)
- [Build and Pack Commands](mdc:#build-and-pack-commands)
- [Quality Checks](mdc:#quality-checks)


## License Configuration

### Use License Expressions

Always use SPDX license expressions instead of deprecated license URLs or embedding license files in your package.

#### ✅ DO: Use license expression

```xml
<PropertyGroup>
  <PackageLicenseExpression>MIT</PackageLicenseExpression>
</PropertyGroup>
```

#### ❌ DON'T: Use deprecated licenseUrl

```xml
<PropertyGroup>
  <PackageLicenseUrl>https://licenses.nuget.org/MIT</PackageLicenseUrl>
</PropertyGroup>
```

### Common License Expression Examples

#### MIT License

```xml
<PropertyGroup>
  <PackageLicenseExpression>MIT</PackageLicenseExpression>
</PropertyGroup>
```

#### Apache 2.0 License

```xml
<PropertyGroup>
  <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
</PropertyGroup>
```

#### BSD 3-Clause License

```xml
<PropertyGroup>
  <PackageLicenseExpression>BSD-3-Clause</PackageLicenseExpression>
</PropertyGroup>
```

#### GPL v3 License

```xml
<PropertyGroup>
  <PackageLicenseExpression>GPL-3.0-only</PackageLicenseExpression>
</PropertyGroup>
```

#### Multiple Licenses (OR)

```xml
<PropertyGroup>
  <PackageLicenseExpression>MIT OR Apache-2.0</PackageLicenseExpression>
</PropertyGroup>
```

## Package Documentation

### Include README.md

Always include a README.md file in your package to provide clear documentation for users.

#### ✅ DO: Include README with proper configuration

```xml
<PropertyGroup>
  <PackageReadmeFile>README.md</PackageReadmeFile>
</PropertyGroup>
<ItemGroup>
  <None Include="README.md" Pack="true" PackagePath="/" />
</ItemGroup>
```

#### ✅ DO: Include README from a different location

```xml
<PropertyGroup>
  <PackageReadmeFile>README.md</PackageReadmeFile>
</PropertyGroup>
<ItemGroup>
  <None Include="docs/README.md" Pack="true" PackagePath="/" />
</ItemGroup>
```

#### ❌ DON'T: Forget to include the README in the package

```xml
<PropertyGroup>
  <PackageReadmeFile>README.md</PackageReadmeFile>
  <!-- Missing the ItemGroup that includes the file -->
</PropertyGroup>
```

### README Content Best Practices

A good README.md should include:

1. Package name and description
2. Installation instructions
3. Basic usage examples
4. API documentation or link to it
5. License information
6. Contributing guidelines

#### Example README.md Structure

```markdown
# MyAwesomePackage

A lightweight, high-performance library for doing awesome things.

## Installation

```shell
dotnet add package MyAwesomePackage
```

## Quick Start

```csharp
using MyAwesomeNamespace;

var awesome = new AwesomeClass();
var result = awesome.DoSomethingAwesome();
```

## Features

- Feature 1: Description
- Feature 2: Description
- Feature 3: Description

## Documentation

For full documentation, visit [our docs site](mdc:https:/docs.myawesomepackage.com).

## License

MIT License
```

### Image Domain Restrictions

When including images in your README.md, ensure they come from trusted domains. NuGet.org only renders images from approved domains.

#### Approved Image Domains

- api.codacy.com
- app.codacy.com
- api.codeclimate.com
- api.dependabot.com
- api.travis-ci.com
- api.reuse.software
- app.fossa.com
- app.fossa.io
- avatars.githubusercontent.com
- badge.fury.io
- badgen.net
- badges.gitter.im
- buildstats.info
- caniuse.bitsofco.de
- camo.githubusercontent.com
- cdn.jsdelivr.net
- cdn.syncfusion.com
- ci.appveyor.com
- circleci.com
- codecov.io
- codefactor.io
- coveralls.io
- dev.azure.com
- flat.badgen.net
- github.com/.../workflows/.../badge.svg
- gitlab.com
- img.shields.io
- i.imgur.com
- isitmaintained.com
- opencollective.com
- raw.github.com
- raw.githubusercontent.com
- snyk.io
- sonarcloud.io
- travis-ci.com
- travis-ci.org
- wakatime.com
- user-images.githubusercontent.com

#### ✅ DO: Use approved domains for images

```markdown
![Build Status](mdc:https:/img.shields.io/github/workflow/status/myorg/myrepo/CI)
![Coverage](mdc:https:/codecov.io/gh/myorg/myrepo/branch/main/graph/badge.svg)
```

#### ❌ DON'T: Use unapproved domains for images

```markdown
![Logo](mdc:https:/my-unapproved-domain.com/logo.png)
```

## Metadata Organization

### Directory.Build.props for Common Metadata

Use `Directory.Build.props` for common metadata shared across multiple packages in a solution.

#### ✅ DO: Place common metadata in Directory.Build.props

```xml
<Project>
  <PropertyGroup>
    <!-- Company/Organization Information -->
    <Authors>Contoso, Inc.</Authors>
    <Company>Contoso, Inc.</Company>
    <Copyright>© $([System.DateTime]::Now.Year) Contoso, Inc. All rights reserved.</Copyright>
    
    <!-- Repository Information -->
    <PackageProjectUrl>https://github.com/contoso/awesome-library</PackageProjectUrl>
    <RepositoryUrl>https://github.com/contoso/awesome-library.git</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    
    <!-- Release Information -->
    <PackageReleaseNotes>https://github.com/contoso/awesome-library/releases</PackageReleaseNotes>
    
    <!-- Common Package Configuration -->
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageRequireLicenseAcceptance>false</PackageRequireLicenseAcceptance>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageIcon>icon.png</PackageIcon>
    
    <!-- Build Configuration -->
    <LangVersion>latest</LangVersion>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
  </PropertyGroup>
  
  <ItemGroup>
    <None Include="$(MSBuildThisFileDirectory)\icon.png" Pack="true" PackagePath="\" Visible="false" />
  </ItemGroup>
</Project>
```

### Project-Specific Metadata

Keep package-specific metadata in the project file (`.csproj`, `.fsproj`).

#### ✅ DO: Place package-specific metadata in project file

```xml
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    
    <!-- Package-specific metadata -->
    <PackageId>Contoso.AwesomeLibrary.Core</PackageId>
    <Version>1.2.3</Version>
    <Description>A core library for doing awesome things efficiently and reliably.</Description>
    <PackageTags>awesome;library;performance;utilities</PackageTags>
    
    <!-- Package-specific configuration -->
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>
  
  <ItemGroup>
    <None Include="README.md" Pack="true" PackagePath="\" />
  </ItemGroup>
</Project>
```

#### ❌ DON'T: Duplicate common metadata in project files

```xml
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    
    <!-- DON'T duplicate these in every project file -->
    <Authors>Contoso, Inc.</Authors>
    <Company>Contoso, Inc.</Company>
    <Copyright>© 2023 Contoso, Inc. All rights reserved.</Copyright>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/contoso/awesome-library</PackageProjectUrl>
    
    <!-- Package-specific metadata -->
    <PackageId>Contoso.AwesomeLibrary.Core</PackageId>
    <Version>1.2.3</Version>
    <Description>A core library for doing awesome things efficiently and reliably.</Description>
    <PackageTags>awesome;library;performance;utilities</PackageTags>
  </PropertyGroup>
</Project>
```

## Source Debugging Support

### Enable SourceLink

SourceLink enables step-through debugging of your package's source code directly from NuGet packages.

#### ✅ DO: Configure SourceLink for GitHub

```xml
<PropertyGroup>
  <PublishRepositoryUrl>true</PublishRepositoryUrl>
  <EmbedUntrackedSources>true</EmbedUntrackedSources>
  <IncludeSymbols>true</IncludeSymbols>
  <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  <!-- Recommended for deterministic builds in CI -->
  <ContinuousIntegrationBuild Condition="'$(CI)' == 'true'">true</ContinuousIntegrationBuild>
</PropertyGroup>

<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
```

#### ✅ DO: Configure SourceLink for Azure DevOps

```xml
<PropertyGroup>
  <PublishRepositoryUrl>true</PublishRepositoryUrl>
  <EmbedUntrackedSources>true</EmbedUntrackedSources>
  <IncludeSymbols>true</IncludeSymbols>
  <SymbolPackageFormat>snupkg</SymbolPackageFormat>
</PropertyGroup>

<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.AzureRepos.Git" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
```

#### ✅ DO: Configure SourceLink for GitLab

```xml
<PropertyGroup>
  <PublishRepositoryUrl>true</PublishRepositoryUrl>
  <EmbedUntrackedSources>true</EmbedUntrackedSources>
  <IncludeSymbols>true</IncludeSymbols>
  <SymbolPackageFormat>snupkg</SymbolPackageFormat>
</PropertyGroup>

<ItemGroup>
  <PackageReference Include="Microsoft.SourceLink.GitLab" Version="1.1.1" PrivateAssets="All"/>
</ItemGroup>
```

#### ❌ DON'T: Publish packages without symbol support

```xml
<PropertyGroup>
  <!-- Missing SourceLink and symbol configuration -->
  <Version>1.0.0</Version>
</PropertyGroup>
```

### Symbol Packages

Always include symbol packages (`.snupkg`)

#### ✅ DO: Configure symbol package generation

```xml
<PropertyGroup>
  <IncludeSymbols>true</IncludeSymbols>
  <SymbolPackageFormat>snupkg</SymbolPackageFormat>
</PropertyGroup>
```